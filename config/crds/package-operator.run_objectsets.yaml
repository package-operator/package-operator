
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.6.2
  creationTimestamp: null
  name: objectsets.package-operator.run
spec:
  group: package-operator.run
  names:
    kind: ObjectSet
    listKind: ObjectSetList
    plural: objectsets
    singular: objectset
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.phase
      name: Status
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: "ObjectSet reconciles a collection of objects through ordered
          phases and aggregates their status. \n ObjectSets behave similarly to Kubernetes
          ReplicaSets, by managing a collection of objects and being itself mostly
          immutable. This object type is able to suspend/pause reconciliation of specific
          objects to facilitate the transition between revisions. \n Archived ObjectSets
          may stay on the cluster, to store information about previous revisions.
          \n A Cluster-scoped version of this API is available as ClusterObjectSet."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ObjectSetSpec defines the desired state of a ObjectSet.
            properties:
              availabilityProbes:
                description: Availability Probes check objects that are part of the
                  package. All probes need to succeed for a package to be considered
                  Available. Failing probes will prevent the reconciliation of objects
                  in later phases.
                items:
                  description: ObjectSetProbe define how ObjectSets check their children
                    for their status.
                  properties:
                    probes:
                      description: Probe configuration parameters.
                      items:
                        description: Defines probe parameters. Only one can be filled.
                        properties:
                          condition:
                            description: Checks whether or not the object reports
                              a condition with given type and status.
                            properties:
                              status:
                                default: "True"
                                description: Condition status to probe for.
                                type: string
                              type:
                                description: Condition type to probe for.
                                type: string
                            required:
                            - status
                            - type
                            type: object
                          fieldsEqual:
                            description: Compares two fields specified by JSON Paths.
                            properties:
                              fieldA:
                                description: First field for comparison.
                                type: string
                              fieldB:
                                description: Second field for comparison.
                                type: string
                            required:
                            - fieldA
                            - fieldB
                            type: object
                        type: object
                      type: array
                    selector:
                      description: Selector specifies which objects this probe should
                        target.
                      properties:
                        kind:
                          description: Kind and API Group of the object to probe.
                          properties:
                            group:
                              description: Object Group to apply a probe to.
                              type: string
                            kind:
                              description: Object Kind to apply a probe to.
                              type: string
                          required:
                          - group
                          - kind
                          type: object
                        selector:
                          description: Further sub-selects objects based on a Label
                            Selector.
                          properties:
                            selector:
                              description: Selector targeting objects to probe.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label
                                    selector requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a
                                      selector that contains values, a key, and an
                                      operator that relates the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the
                                          selector applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship
                                          to a set of values. Valid operators are
                                          In, NotIn, Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string
                                          values. If the operator is In or NotIn,
                                          the values array must be non-empty. If the
                                          operator is Exists or DoesNotExist, the
                                          values array must be empty. This array is
                                          replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value}
                                    pairs. A single {key,value} in the matchLabels
                                    map is equivalent to an element of matchExpressions,
                                    whose key field is "key", the operator is "In",
                                    and the values array contains only "value". The
                                    requirements are ANDed.
                                  type: object
                              type: object
                          required:
                          - selector
                          type: object
                      required:
                      - kind
                      type: object
                  required:
                  - probes
                  - selector
                  type: object
                type: array
              lifecycleState:
                default: Active
                description: Specifies the lifecycle state of the ObjectSet.
                enum:
                - Active
                - Paused
                - Archived
                type: string
              phases:
                description: Reconcile phase configuration for a ObjectSet. Phases
                  will be reconciled in order and the contained objects checked against
                  given probes before continuing with the next phase.
                items:
                  description: ObjectSet reconcile phase.
                  properties:
                    class:
                      description: If non empty, the ObjectSet controller will delegate
                        phase reconciliation to another controller, by creating an
                        ObjectSetPhase object. If set to the string "default" the
                        built-in Package Operator ObjectSetPhase controller will reconcile
                        the object in the same way the ObjectSet would. If set to
                        any other string, an out-of-tree controller needs to be present
                        to handle ObjectSetPhase objects.
                      type: string
                    name:
                      description: Name of the reconcile phase. Must be unique within
                        a ObjectSet.
                      type: string
                    objects:
                      description: Objects belonging to this phase.
                      items:
                        description: An object that is part of the phase of an ObjectSet.
                        properties:
                          object:
                            type: object
                            x-kubernetes-embedded-resource: true
                            x-kubernetes-preserve-unknown-fields: true
                        required:
                        - object
                        type: object
                      type: array
                  required:
                  - name
                  - objects
                  type: object
                type: array
              previous:
                description: Previous revisions of the ObjectSet to adopt objects
                  from.
                items:
                  description: References a previous revision of an ObjectSet, ClusterObjectSet,
                    ObjectSetPhase or ClusterObjectSetPhase.
                  properties:
                    group:
                      description: Object group of a previous revision.
                      type: string
                    kind:
                      description: Object kind of a previous revision.
                      type: string
                    name:
                      description: Name of a previous revision.
                      type: string
                  required:
                  - group
                  - kind
                  - name
                  type: object
                type: array
            required:
            - availabilityProbes
            - phases
            type: object
          status:
            default:
              phase: Pending
            description: ObjectSetStatus defines the observed state of a ObjectSet.
            properties:
              conditions:
                description: Conditions is a list of status conditions ths object
                  is in.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{     // Represents the observations of a
                    foo's current state.     // Known .status.conditions.type are:
                    \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                    \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                    \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                    \n     // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              phase:
                description: 'Deprecated: This field is not part of any API contract
                  it will go away as soon as kubectl can print conditions! When evaluating
                  object state in code, use .Conditions instead.'
                type: string
              revision:
                description: Computed revision number, monotonically increasing.
                format: int64
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
